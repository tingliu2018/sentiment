package parsertest;
/**
 *
 * @author thomas
 */
public class Word implements Comparable {

    protected String word = null;
    protected double count = -1;
    protected double AverageCount = 0;
    protected double AwesomeCount = 0;
    protected double AwfulCount = 0;
    protected double GoodCount = 0;
    protected double PoorCount = 0;
    protected double score = -1;
    protected Word parent = null;

    /**
     * Constructor for when a words appearances are being counted
     *
     * @param word The words string
     * @param count The current number of times the word has been seen across
     * all files
     */
    public Word(String word, int count) {
        this.word = word;
        this.count = count;
    }

    /**
     * Constructor for when a Word is used that has a sentiment score
     *
     * @param word The words string
     * @param score The sentiment score of the word
     */
    public Word(String word, double score) {
        this.word = word;
        this.score = score;
    }

    /**
     * Constructor for a word generated by another words Synset, score is set to
     * parents score
     *
     * @param word This words string
     * @param parent The parent word of which this word is part of its synset
     */
    public Word(String word, Word parent) {
        this.word = word;
        this.score = parent.getScore();
        this.parent = parent;
    }

    public String getWord() throws NullPointerException {
        if (word == null) {
            throw new NullPointerException();
        } else {
            return word;
        }
    }

    public void setWord(String word) {
        this.word = word;
    }

    public double getCount() {
        return count;
    }

    public void setCount(double count) {
        this.count = count;
    }

    public double getAverageCount() {
        return AverageCount;
    }

    public void setAverageCount(double AverageCount) {
        this.AverageCount = AverageCount;
    }

    public double getAwesomeCount() {
        return AwesomeCount;
    }

    public void setAwesomeCount(double AwesomeCount) {
        this.AwesomeCount = AwesomeCount;
    }

    public double getAwfulCount() {
        return AwfulCount;
    }

    public void setAwfulCount(double AwfulCount) {
        this.AwfulCount = AwfulCount;
    }

    public double getGoodCount() {
        return GoodCount;
    }

    public void setGoodCount(double GoodCount) {
        this.GoodCount = GoodCount;
    }

    public double getPoorCount() {
        return PoorCount;
    }

    public void setPoorCount(double PoorCount) {
        this.PoorCount = PoorCount;
    }

    public double getScore() {
        return score;
    }

    public void setScore(double score) {
        this.score = score;
    }

    public Word getParent() throws NullPointerException {
        if (parent == null) {
            throw new NullPointerException();
        } else {
            return parent;
        }
    }

    public void setParent(Word parent) {
        this.parent = parent;
    }

    @Override
    public String toString() {
        return word + " " + count;
    }

    /**
    @Override
    public int compareTo(Object obj) {
        Word compareWord = (Word) obj;
        return (int) (compareWord.getCount() - this.count);
    }
    **/
    @Override
    public int compareTo(Object obj) {
        Word compareWord = (Word) obj;
        return this.word.compareTo(compareWord.getWord());
    }
}
